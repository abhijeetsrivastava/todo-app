{"version":3,"sources":["component/ui/StylishCard.tsx","component/ui/Button.tsx","model/Setting.tsx","component/ui/Icon.tsx","component/ui/Alert.tsx","component/Features.tsx","component/item/ItemHeader.tsx","component/item/Item.tsx","model/List.tsx","component/list/ListComponent.tsx","component/list/List.tsx","model/Item.tsx","component/list/GenericList.tsx","component/NotFoundPage.tsx","component/Body.tsx","component/ConfirmationModal.tsx","component/SettingComponent.tsx","component/Footer.tsx","component/Header.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["StylishCard","variant","vals","props","id","charCodeAt","length","Card","style","backgroundColor","this","children","React","Component","Button","disabled","title","onClick","defaultProps","SortingBy","StarIcon","className","StarFillIcon","SettingIcon","CheckBoxIcon","MoveIcon","GithubIcon","LinkedinIcon","Alert","clearMessage","message","show","created","useEffect","intervalId","setInterval","clearInterval","CreateAlert","Heading","DeleteAlert","Features","href","ItemHeader","handleChange","text","setState","value","state","InputGroup","Form","Control","type","placeholder","onChange","event","target","Append","Text","undefined","color","Item","item","onImportantToggle","inline","Check","custom","completed","label","checked","important","createList","name","uuidV4","updatedAt","Date","now","createSetting","sort","sortBy","none","ListComponent","Body","Title","Row","Col","xs","md","list","deleteList","addTodo","Footer","millis","seconds","Math","floor","minutes","hours","updated","List","useState","items","setItems","json","localStorage","getItem","JSON","parse","setItem","stringify","handleCheck","map","updatedList","handleImportantToggle","showItems","showImportant","filter","itemComponents","setting","unchecked","item1","item2","key","newItem","listId","createItem","GenericList","CardColumns","handle","animation","setList","data","NotFoundPage","Jumbotron","Container","exact","path","updateList","ConfirmationModal","onClose","onConfirm","useLocation","pathname","includes","Modal","onHide","Header","closeButton","SettingComponent","updateSetting","DropdownButton","alignRight","drop","onSelect","selectedKey","Dropdown","eventKey","active","Navbar","fixed","collapseOnSelect","expand","bg","Nav","Brand","Link","addTodoList","disabledCreate","setFilter","setValue","as","to","term","App","lists","setLists","setTerm","deleteListId","setDeleteListId","setSetting","alertMsg","setAlert","jsonLists","defaultSetting","filteredLists","toLowerCase","trim","removeItem","updatedSetting","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b6b8cae4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nexport class StylishCard extends React.Component<StylishCardProps> {\n  private variant = (): string => {\n    const vals = [\n      \"#eb9694\",\n      \"#fad0c3\",\n      \"#fef3bd\",\n      \"#c1e1c5\",\n      \"#bedadc\",\n      \"#c4def6\",\n      \"#d4c4fb\",\n    ];\n    return vals[this.props.id.charCodeAt(0) % vals.length];\n  };\n\n  render() {\n    return (\n      <Card style={{ backgroundColor: this.variant() }}>\n        {this.props.children}\n      </Card>\n    );\n  }\n}\n\ninterface StylishCardProps {\n  id: string;\n}\n","import React from \"react\";\nimport { Button as BootStrapButton } from \"react-bootstrap\";\n\ninterface ButtonProps {\n  title?: string;\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nexport const Button: React.SFC<ButtonProps> = ({\n  disabled,\n  title,\n  onClick,\n  children,\n}) => (\n  <BootStrapButton disabled={disabled} variant=\"outline-info\" onClick={onClick}>\n    {title}\n    {children}\n  </BootStrapButton>\n);\n\nButton.defaultProps = {\n  title: \"\",\n  disabled: false,\n};\n","export enum SortingBy {\n  \"none\",\n  \"important\",\n  \"unchecked\",\n}\n\ntype SortingByStrings = keyof typeof SortingBy;\n\nexport interface Setting {\n  sortBy: SortingByStrings;\n}\n\nexport const createSetting = (sort?: SortingBy): Setting => {\n  return sort\n    ? { sortBy: SortingBy[sort] as SortingByStrings }\n    : { sortBy: SortingBy[SortingBy.none] as SortingByStrings };\n};\n","import React from \"react\";\nimport { AiFillStar, AiOutlineStar } from \"react-icons/ai\";\nimport { FcSettings } from \"react-icons/fc\";\nimport { IoIosCheckboxOutline } from \"react-icons/io\";\nimport { FaExpandArrowsAlt } from \"react-icons/fa\";\nimport { AiFillLinkedin, AiFillGithub } from \"react-icons/ai\";\n\nexport const StarIcon = () => <AiOutlineStar className=\"mr-1\" />;\nexport const StarFillIcon = () => <AiFillStar className=\"mr-1\" />;\nexport const SettingIcon = () => <FcSettings className=\"mr-1\" />;\nexport const CheckBoxIcon = () => <IoIosCheckboxOutline className=\"mr-1\" />;\nexport const MoveIcon = () => (\n  <FaExpandArrowsAlt className=\"mr-1 drag-handle\" />\n);\nexport const GithubIcon = () => <AiFillGithub className=\"mr-1\" />;\nexport const LinkedinIcon = () => <AiFillLinkedin className=\"mr-1\" />;\n","import React, { useEffect } from \"react\";\nimport { Alert as BootStrapAlert } from \"react-bootstrap\";\n\nexport const Alert: React.SFC<AlertProps> = ({ clearMessage, message }) => {\n  const show: boolean = message !== \"\";\n  const created: boolean = message === \"created\";\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      clearMessage();\n    }, 4000);\n    return () => clearInterval(intervalId);\n  }, [clearMessage]);\n\n  if (show) {\n    if (created) return <CreateAlert show={show} />;\n    else return <DeleteAlert show={show} />;\n  } else {\n    return null;\n  }\n};\n\ninterface AlertProps {\n  message: string;\n  clearMessage: () => void;\n}\n\nconst CreateAlert: React.SFC<CreateOrDeleteProps> = ({ show }) => (\n  <BootStrapAlert show={show} variant=\"success\">\n    <BootStrapAlert.Heading>New List Created </BootStrapAlert.Heading>\n    <p>List has been created, add todo items!!</p>\n  </BootStrapAlert>\n);\n\nconst DeleteAlert: React.SFC<CreateOrDeleteProps> = ({ show }) => (\n  <BootStrapAlert show={show} variant=\"danger\">\n    <BootStrapAlert.Heading>List Deleted!! </BootStrapAlert.Heading>\n    <p>List has been deleted, fewer lists to worry about!!</p>\n  </BootStrapAlert>\n);\n\ninterface CreateOrDeleteProps {\n  show: boolean;\n}\n","import React from \"react\";\nimport { CheckBoxIcon, MoveIcon, StarIcon, StarFillIcon } from \"./ui\";\nimport { MdLibraryAdd } from \"react-icons/md\";\nimport { IoMdCloseCircleOutline } from \"react-icons/io\";\n\nexport const Features = () => {\n  return (\n    <div>\n      <ul>\n        <li>\n          <a href=\"#features\">Features</a>\n        </li>\n        <li>\n          <a href=\"#sort-setting\">Sort Setting</a>\n        </li>\n        <li>\n          <a href=\"#faq\">Frequently Asked Questions</a>\n        </li>\n      </ul>\n      <p>\n        This is a simple TODO app built using Typescript. I have created this\n        project using VIM editor.\n      </p>\n      <h2 id=\"features\">Features</h2>\n      <ul>\n        <li>Search/Create list.</li>\n        <li>\n          <MdLibraryAdd /> Add items to list.\n        </li>\n        <li>\n          <CheckBoxIcon /> Check/uncheck item.\n        </li>\n        <li>\n          <StarIcon /> Mark items as important.\n        </li>\n        <li>Each list shows when the list was last updated.</li>\n        <li>\n          <MoveIcon /> Move lists around by using drag handle.\n        </li>\n        <li>\n          <IoMdCloseCircleOutline /> Delete list would prompt user for\n          confirmation.\n        </li>\n        <li>Deleting and creating list shows alert.</li>\n      </ul>\n      <h2 id=\"sort-setting\">Sort Setting</h2>\n      <p>\n        There is a setting option on bottom right corner. - Sort by None,\n        Important <StarFillIcon /> or pending <CheckBoxIcon /> options.\n      </p>\n      <h2 id=\"faq\">Frequently Asked Questions</h2>\n      <p>\n        <strong>Question: </strong>Where does my list get saved?\n        <br />\n        <strong>Answer: </strong>It uses localStorage of your browser, which\n        means all data is local.\n        <br />\n        <strong>Question: </strong>What are the supported browsers?\n        <br />\n        <strong>Answer: </strong>I have tested this on chrome.\n      </p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\nimport { MdLibraryAdd } from \"react-icons/md\";\n\nexport class ItemHeader extends React.Component<\n  ItemHeaderProps,\n  ItemHeaderState\n> {\n  constructor(props: ItemHeaderProps) {\n    super(props);\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  private handleChange = (text: string) => {\n    this.setState({\n      value: text,\n    });\n  };\n\n  private onClick = () => {\n    this.setState({\n      value: \"\",\n    });\n    this.props.onClick(this.state.value);\n  };\n\n  render() {\n    return (\n      <InputGroup>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Add todo item\"\n          value={this.state.value.length !== 0 ? this.state.value : \"\"}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            this.handleChange(event.target.value)\n          }\n        />\n        <InputGroup.Append>\n          <InputGroup.Text\n            onClick={this.state.value.length !== 0 ? this.onClick : undefined}\n          >\n            <MdLibraryAdd\n              color={this.state.value.length !== 0 ? \"black\" : \"gray\"}\n            />\n          </InputGroup.Text>\n        </InputGroup.Append>\n      </InputGroup>\n    );\n  }\n}\n\ninterface ItemHeaderState {\n  value: string;\n}\n\ninterface ItemHeaderProps {\n  onClick: (text: string) => void;\n}\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nimport { Item as ItemModel } from \"../../model\";\nimport { StarIcon, StarFillIcon } from \"../ui\";\n\nexport const Item: React.SFC<ItemProps> = ({\n  item,\n  onClick,\n  onImportantToggle,\n}) => {\n  return (\n    <Form inline>\n      <Form.Check\n        custom\n        className={item.completed ? \"todo-item-unchecked\" : \"todo-item\"}\n        type=\"checkbox\"\n        id={item.id + \"-checkbox\"}\n        label={\" \"}\n        onChange={() => onClick(item.id)}\n        checked={item.completed}\n      />\n      <div onClick={() => onImportantToggle(item.id)}>\n        {item.important ? <StarFillIcon /> : <StarIcon />}\n      </div>\n      {item.text}\n    </Form>\n  );\n};\n\ninterface ItemProps {\n  item: ItemModel;\n  onClick: (id: string) => void;\n  onImportantToggle: (id: string) => void;\n}\n","import { v4 as uuidV4 } from \"uuid\";\n\nexport interface List {\n  id: string;\n  name: string;\n  updatedAt: number; // type of date is number\n}\n\nexport const createList = (name: string): List => {\n  return {\n    id: uuidV4(),\n    name: name,\n    updatedAt: Date.now(),\n  };\n};\n","import React from \"react\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport { IoMdCloseCircleOutline } from \"react-icons/io\";\n\nimport { List as ListModel } from \"../../model\";\nimport { ItemHeader } from \"../item\";\nimport { StylishCard, MoveIcon } from \"../ui\";\n\nexport const ListComponent: React.SFC<ListComponentProps> = (props) => {\n  const updated = (): string => {\n    const millis = Date.now() - props.list.updatedAt;\n    const seconds = Math.floor(millis / 1000) % 60;\n    const minutes = Math.floor(millis / (1000 * 60)) % 60;\n    const hours = Math.floor(millis / (1000 * 60 * 60)) % 60;\n    if (minutes === 0) return seconds + \" secs\";\n    else if (hours === 0) return minutes + \" mins\";\n    else return hours + \" hours\";\n  };\n\n  return (\n    <StylishCard id={props.id}>\n      <Card.Body>\n        <Card.Title>\n          <Row>\n            <Col xs={12} md={8}>\n              <MoveIcon /> {props.list.name}\n            </Col>\n            <Col xs={6} md={4} className=\"text-right\">\n              <IoMdCloseCircleOutline\n                onClick={() => props.deleteList(props.id)}\n              />\n            </Col>\n          </Row>\n        </Card.Title>\n        <ItemHeader onClick={props.addTodo} />\n        <div>{props.children}</div>\n      </Card.Body>\n      <Card.Footer>\n        <small className=\"text-muted\">Last updated {updated()} ago</small>\n      </Card.Footer>\n    </StylishCard>\n  );\n};\n\ninterface ListComponentProps {\n  id: string;\n  list: ListModel;\n  addTodo: (text: string) => void;\n  deleteList: (id: string) => void;\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport { Item } from \"../item\";\nimport {\n  Setting,\n  Item as ItemModel,\n  List as ListModel,\n  createItem,\n  SortingBy,\n} from \"../../model\";\nimport { ListComponent } from \"./ListComponent\";\n\nexport const List: React.SFC<ListProps> = (props) => {\n  const [items, setItems] = useState<Array<ItemModel>>([]);\n\n  useEffect(() => {\n    const json = localStorage.getItem(props.id);\n    const items: Array<ItemModel> = JSON.parse(json || \"[]\");\n    setItems(items);\n  }, [props.id]);\n\n  useEffect(() => {\n    localStorage.setItem(props.id, JSON.stringify(items));\n  }, [items, props.id]);\n\n  const handleCheck = (id: string) => {\n    setItems(\n      items.map((item: ItemModel) =>\n        item.id === id ? { ...item, completed: !item.completed } : item\n      )\n    );\n    props.updatedList(props.id);\n  };\n\n  const handleImportantToggle = (id: string) => {\n    setItems(\n      items.map((item: ItemModel) =>\n        item.id === id ? { ...item, important: !item.important } : item\n      )\n    );\n    props.updatedList(props.id);\n  };\n\n  const addTodo = (text: string) => {\n    const newItem = createItem(props.id, text);\n    const item = props.showImportant\n      ? { ...newItem, important: true }\n      : newItem;\n    setItems([...items, item]);\n    props.updatedList(props.id);\n  };\n\n  const showItems: ItemModel[] = props.showImportant\n    ? items.filter((item) => item.important)\n    : items;\n\n  const sortedItems = (): ItemModel[] => {\n    if (props.setting.sortBy === SortingBy[SortingBy.unchecked]) {\n      return showItems.sort((item1, item2) =>\n        item1.completed && item2.completed ? 0 : item1.completed ? 1 : -1\n      );\n    } else if (props.setting.sortBy === SortingBy[SortingBy.important]) {\n      return showItems.sort((item1, item2) =>\n        item1.important && item2.important ? 0 : item1.important ? -1 : 1\n      );\n    } else {\n      return showItems;\n    }\n  };\n\n  const itemComponents = sortedItems().map((item) => (\n    <Item\n      key={item.id}\n      item={item}\n      onImportantToggle={\n        !props.showImportant ? handleImportantToggle : () => {}\n      }\n      onClick={handleCheck}\n    />\n  ));\n\n  return (\n    <ListComponent\n      id={props.id}\n      deleteList={props.deleteList}\n      list={props.list}\n      addTodo={addTodo}\n    >\n      {itemComponents}\n    </ListComponent>\n  );\n};\n\ninterface ListProps {\n  id: string;\n  list: ListModel;\n  deleteList: (id: string) => void;\n  updatedList: (id: string) => void;\n  showImportant: boolean;\n  setting: Setting;\n}\n","import { v4 as uuidV4 } from \"uuid\";\n\nexport interface Item {\n  id: string;\n  listId: string;\n  text: string;\n  completed: boolean;\n  important: boolean;\n}\n\nexport const createItem = (listId: string, text: string): Item => {\n  return {\n    id: uuidV4(),\n    listId: listId,\n    text: text,\n    completed: false,\n    important: false,\n  };\n};\n","import React from \"react\";\nimport { CardColumns } from \"react-bootstrap\";\nimport { ReactSortable, ReactSortableProps } from \"react-sortablejs\";\n\nimport { List } from \"./List\";\nimport { List as ListModel, Setting } from \"../../model\";\n\nexport const GenericList: React.SFC<\n  ReactSortableProps<ListModel> & GenericListProps\n> = (props) => {\n  return (\n    <CardColumns>\n      <ReactSortable\n        handle=\".drag-handle\"\n        animation={150}\n        list={props.list}\n        setList={props.setList}\n      >\n        {props.list.map((data) => (\n          <List\n            id={data.id}\n            key={data.id}\n            list={data}\n            updatedList={props.updatedList}\n            deleteList={props.deleteList}\n            showImportant={!!props.showImportant}\n            setting={props.setting}\n          />\n        ))}\n      </ReactSortable>\n    </CardColumns>\n  );\n};\n\ninterface GenericListProps {\n  showImportant?: boolean;\n  deleteList: (id: string) => void;\n  updatedList: (id: string) => void;\n  setting: Setting;\n}\n\nGenericList.defaultProps = {\n  showImportant: false,\n};\n","import React from \"react\";\nimport { Jumbotron } from \"react-bootstrap\";\n\nexport const NotFoundPage = () => (\n  <Jumbotron>\n    <h1 className=\"text-center\">404: Page not found!</h1>\n  </Jumbotron>\n);\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { ReactSortableProps } from \"react-sortablejs\";\n\nimport { Features } from \"./Features\";\nimport { GenericList } from \"./list\";\nimport { List as ListModel } from \"../model\";\nimport { NotFoundPage } from \"./NotFoundPage\";\nimport { Setting } from \"../model\";\n\nexport const Body: React.SFC<ReactSortableProps<ListModel> & BodyProps> = (\n  props\n) => {\n  return (\n    <Container className=\"pt-3 pb-5\">\n      <Switch>\n        <Route exact path=\"/important\">\n          <GenericList\n            list={props.list}\n            setList={props.setList}\n            deleteList={props.deleteList}\n            updatedList={props.updateList}\n            showImportant={true}\n            setting={props.setting}\n          />\n        </Route>\n        <Route exact path=\"/features\">\n          <Features />\n        </Route>\n        <Route exact path=\"/\">\n          <GenericList\n            list={props.list}\n            setList={props.setList}\n            deleteList={props.deleteList}\n            updatedList={props.updateList}\n            setting={props.setting}\n          />\n        </Route>\n        <Route path=\"*\">\n          <NotFoundPage />\n        </Route>\n      </Switch>\n    </Container>\n  );\n};\n\ninterface BodyProps {\n  deleteList: (id: string) => void;\n  updateList: (id: string) => void;\n  setting: Setting;\n}\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const ConfirmationModal: React.SFC<ConfirmationModalProps> = ({\n  show,\n  onClose,\n  onConfirm,\n}) => {\n  let location = useLocation();\n  const message = location.pathname.includes(\"important\")\n    ? \"Are you sure you want to delete this list? It might contain some non-important items which are not visible\"\n    : \"Are you sure you want to delete the list?\";\n\n  return (\n    <Modal show={show} onHide={onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Delete List</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{message}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Close\n        </Button>\n        <Button variant=\"primary\" onClick={onConfirm}>\n          Delete\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\ninterface ConfirmationModalProps {\n  onClose: () => void;\n  onConfirm: () => void;\n  show: boolean;\n}\n","import React from \"react\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\nimport { StarFillIcon, SettingIcon, CheckBoxIcon } from \"./ui\";\nimport { SortingBy, Setting, createSetting } from \"../model\";\n\nexport const SettingComponent: React.SFC<SettingComponentProps> = ({\n  setting,\n  updateSetting,\n}) => {\n  const onSelectHandler = (selectedKey: string | null) => {\n    if (selectedKey === \"none\") updateSetting(createSetting(SortingBy.none));\n    else if (selectedKey === \"important\")\n      updateSetting(createSetting(SortingBy.important));\n    else updateSetting(createSetting(SortingBy.unchecked));\n  };\n\n  return (\n    <DropdownButton\n      id=\"dropdown-menu-align-right\"\n      alignRight\n      variant=\"default\"\n      title={<SettingIcon />}\n      drop=\"up\"\n      onSelect={onSelectHandler}\n    >\n      <Dropdown.Header>Sort By</Dropdown.Header>\n      <Dropdown.Item\n        eventKey={SortingBy[SortingBy.none]}\n        active={setting.sortBy === SortingBy[SortingBy.none]}\n      >\n        None\n      </Dropdown.Item>\n      <Dropdown.Item\n        eventKey={SortingBy[SortingBy.important]}\n        active={setting.sortBy === SortingBy[SortingBy.important]}\n      >\n        <StarFillIcon />\n      </Dropdown.Item>\n      <Dropdown.Item\n        eventKey={SortingBy[SortingBy.unchecked]}\n        active={setting.sortBy === SortingBy[SortingBy.unchecked]}\n      >\n        <CheckBoxIcon />\n      </Dropdown.Item>\n    </DropdownButton>\n  );\n};\n\ninterface SettingComponentProps {\n  setting: Setting;\n  updateSetting: (setting: Setting) => void;\n}\n","import React from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport { SettingComponent } from \"./SettingComponent\";\nimport { GithubIcon, LinkedinIcon } from \"./ui\";\nimport { Setting } from \"../model\";\n\nexport const Footer: React.SFC<FooterProps> = ({ setting, updateSetting }) => (\n  <Navbar fixed=\"bottom\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n    <Nav className=\"mr-auto\">\n      <Navbar.Brand>Links</Navbar.Brand>\n      <Nav.Link href=\"https://www.linkedin.com/in/notabhijeet\" target=\"_blank\">\n        <LinkedinIcon />\n      </Nav.Link>\n      <Nav.Link href=\"https://github.com/abhijeetsrivastava\" target=\"_blank\">\n        <GithubIcon />\n      </Nav.Link>\n    </Nav>\n    <SettingComponent setting={setting} updateSetting={updateSetting} />\n  </Navbar>\n);\n\ninterface FooterProps {\n  setting: Setting;\n  updateSetting: (setting: Setting) => void;\n}\n","import React, { useState } from \"react\";\nimport { Form as BootStrapForm } from \"react-bootstrap\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport { Button } from \"./ui\";\n\nexport const Header: React.SFC<HeaderProps> = ({\n  addTodoList,\n  disabledCreate,\n  setFilter,\n}) => {\n  const [value, setValue] = useState(\"\");\n\n  const onClickHandler = () => {\n    addTodoList(value);\n  };\n\n  const onChangeHandler = (term: string) => {\n    setValue(term);\n    setFilter(term);\n  };\n\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand as={Link} to=\"/\">\n        TODO App\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link as={Link} to=\"important\">\n          Important List\n        </Nav.Link>\n        <Nav.Link as={Link} to=\"features\">\n          Features\n        </Nav.Link>\n      </Nav>\n      <BootStrapForm inline>\n        <BootStrapForm.Control\n          type=\"text\"\n          placeholder=\"Search/Create\"\n          className=\"mr-sm-2\"\n          value={value}\n          onChange={(event) => onChangeHandler(event.target.value)}\n        />\n        <Button\n          disabled={disabledCreate}\n          onClick={onClickHandler}\n          title=\"Add\"\n        />\n      </BootStrapForm>\n    </Navbar>\n  );\n};\n\ninterface HeaderProps {\n  setFilter: (term: string) => void;\n  disabledCreate: boolean;\n  addTodoList: (name: string) => void;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Alert } from \"./ui\";\nimport { Body } from \"./Body\";\nimport { ConfirmationModal } from \"./ConfirmationModal\";\nimport { Footer } from \"./Footer\";\nimport { Header } from \"./Header\";\nimport { Setting, createSetting } from \"../model\";\nimport { createList, List as ListModel } from \"../model\";\n\nconst App = () => {\n  const [lists, setLists] = useState<Array<ListModel>>([]);\n  const [term, setTerm] = useState<string>(\"\");\n  const [deleteListId, setDeleteListId] = useState<string>(\"\");\n  const [setting, setSetting] = useState<Setting>(createSetting());\n  const [alertMsg, setAlert] = useState<string>(\"\");\n\n  useEffect(() => {\n    const lists = localStorage.getItem(\"lists\");\n    const jsonLists: ListModel[] = JSON.parse(lists || \"[]\");\n    setLists(jsonLists);\n\n    const defaultSetting = createSetting();\n    const setting = localStorage.getItem(\"settings\");\n    const json: Setting = JSON.parse(setting || JSON.stringify(defaultSetting));\n    setSetting(json);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"settings\", JSON.stringify(setting));\n  }, [setting]);\n\n  useEffect(() => {\n    localStorage.setItem(\"lists\", JSON.stringify(lists));\n  }, [lists]);\n\n  const filteredLists = lists.filter((list) =>\n    list.name.toLowerCase().includes(term.toLowerCase())\n  );\n\n  const addTodoList = (name: string) => {\n    setAlert(\"created\");\n    setLists([...lists, createList(name)]);\n  };\n\n  const updateList = (id: string) => {\n    setLists(\n      lists.map((list: ListModel) =>\n        list.id === id ? { ...list, updatedAt: Date.now() } : list\n      )\n    );\n  };\n\n  const deleteList = () => {\n    setAlert(\"deleted\");\n    setLists(lists.filter((list) => list.id !== deleteListId));\n    setDeleteListId(\"\");\n    localStorage.removeItem(deleteListId);\n  };\n\n  return (\n    <Router>\n      <Header\n        setFilter={(term: string) => setTerm(term)}\n        addTodoList={addTodoList}\n        disabledCreate={term.trim().length === 0}\n      />\n      <Alert message={alertMsg} clearMessage={() => setAlert(\"\")} />\n      <Body\n        list={filteredLists}\n        setList={setLists}\n        deleteList={(id: string) => setDeleteListId(id)}\n        updateList={updateList}\n        setting={setting}\n      />\n      <ConfirmationModal\n        show={deleteListId.length !== 0}\n        onClose={() => setDeleteListId(\"\")}\n        onConfirm={deleteList}\n      />\n      <Footer\n        setting={setting}\n        updateSetting={(updatedSetting: Setting) => setSetting(updatedSetting)}\n      />\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./component/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}